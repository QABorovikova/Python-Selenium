{"name": "test_smoke", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nfrom unknown error: web view not found\n  (Session info: chrome=115.0.5790.170)\nStacktrace:\n0   chromedriver                        0x000000010272aa6c chromedriver + 4303468\n1   chromedriver                        0x0000000102723198 chromedriver + 4272536\n2   chromedriver                        0x0000000102357594 chromedriver + 292244\n3   chromedriver                        0x000000010232f23c chromedriver + 127548\n4   chromedriver                        0x00000001023ba758 chromedriver + 698200\n5   chromedriver                        0x00000001023cceb8 chromedriver + 773816\n6   chromedriver                        0x0000000102388b40 chromedriver + 494400\n7   chromedriver                        0x0000000102389988 chromedriver + 498056\n8   chromedriver                        0x00000001026eb924 chromedriver + 4045092\n9   chromedriver                        0x00000001026efe68 chromedriver + 4062824\n10  chromedriver                        0x00000001026f6088 chromedriver + 4087944\n11  chromedriver                        0x00000001026f096c chromedriver + 4065644\n12  chromedriver                        0x00000001026c8e64 chromedriver + 3903076\n13  chromedriver                        0x000000010270c55c chromedriver + 4179292\n14  chromedriver                        0x000000010270c6b4 chromedriver + 4179636\n15  chromedriver                        0x000000010271c978 chromedriver + 4245880\n16  libsystem_pthread.dylib             0x0000000199df7fa8 _pthread_start + 148\n17  libsystem_pthread.dylib             0x0000000199df2da0 thread_start + 8", "trace": "browser = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"ef2a928982b1bbcb1aecc6856165d29e\")>\n\n    def test_smoke(browser):\n        \"\"\" test-1 \"\"\"\n    \n       # определяем адрес страницы для теста и переходим на неё\n        browser.get(url=URL)\n    \t\t# ищем по селектору элемент меню \"Бестселлеры\" и кликаем по нему\n>       element = browser.find_element(by=By.CSS_SELECTOR, value='[class*=\"tab-best_sellers\"]')\n\ntests/test_smoke.py:13: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nenv/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:739: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\nenv/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:345: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x104186ad0>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such window\",\"message\":\"no such window: target window already closed\\\\...000199df7fa8 _pthread_start + 148\\\\n17  libsystem_pthread.dylib             0x0000000199df2da0 thread_start + 8\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nE       from unknown error: web view not found\nE         (Session info: chrome=115.0.5790.170)\nE       Stacktrace:\nE       0   chromedriver                        0x000000010272aa6c chromedriver + 4303468\nE       1   chromedriver                        0x0000000102723198 chromedriver + 4272536\nE       2   chromedriver                        0x0000000102357594 chromedriver + 292244\nE       3   chromedriver                        0x000000010232f23c chromedriver + 127548\nE       4   chromedriver                        0x00000001023ba758 chromedriver + 698200\nE       5   chromedriver                        0x00000001023cceb8 chromedriver + 773816\nE       6   chromedriver                        0x0000000102388b40 chromedriver + 494400\nE       7   chromedriver                        0x0000000102389988 chromedriver + 498056\nE       8   chromedriver                        0x00000001026eb924 chromedriver + 4045092\nE       9   chromedriver                        0x00000001026efe68 chromedriver + 4062824\nE       10  chromedriver                        0x00000001026f6088 chromedriver + 4087944\nE       11  chromedriver                        0x00000001026f096c chromedriver + 4065644\nE       12  chromedriver                        0x00000001026c8e64 chromedriver + 3903076\nE       13  chromedriver                        0x000000010270c55c chromedriver + 4179292\nE       14  chromedriver                        0x000000010270c6b4 chromedriver + 4179636\nE       15  chromedriver                        0x000000010271c978 chromedriver + 4245880\nE       16  libsystem_pthread.dylib             0x0000000199df7fa8 _pthread_start + 148\nE       17  libsystem_pthread.dylib             0x0000000199df2da0 thread_start + 8\n\nenv/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:229: NoSuchWindowException"}, "description": " test-1 ", "start": 1691697070318, "stop": 1691697076304, "uuid": "785ba46c-cfb9-44df-87af-24559fa36916", "historyId": "bb8049d0225395e1afee21e6508d8db4", "testCaseId": "bb8049d0225395e1afee21e6508d8db4", "fullName": "tests.test_smoke#test_smoke", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_smoke"}, {"name": "host", "value": "MacBook-Air-Maria.local"}, {"name": "thread", "value": "33067-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_smoke"}]}